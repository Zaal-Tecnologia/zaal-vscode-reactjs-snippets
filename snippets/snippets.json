{
  "component": {
    "prefix": "rsf",
    "body": [
      "import React, { Component } from 'react';",
      "",
      "// import { Container } from './styles';",
      "",
      "export default class ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} extends Component {",
      "  render() {",
      "    return <div />;",
      "  }",
      "}",
      ""
    ],
    "description": "Create ReactJS Stateful Component"
  },
  "componentStateless": {
    "prefix": "rsl",
    "body": [
      "import React from 'react';",
      "",
      "// import { Container } from './styles';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} = () => <div />;",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
      ""
    ],
    "description": "Create ReactJS Stateless Component"
  },
  "componentFunctional": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "",
      "// import { Container } from './styles';",
      "",
      "export default function ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}() {",
      "  return (",
      "    <div />",
      "  );",
      "}",
      ""
    ],
    "description": "Create ReactJS Functional Component"
  },
  "styles": {
    "prefix": "styled-react",
    "body": [
      "import styled from 'styled-components';",
      "",
      "export const ${1:Container} = styled.${2:div}`",
      "  ${3}",
      "`;",
      ""
    ],
    "description": "Create ReactJS Styled Components"
  },

  "api": {
    "prefix": "api",
    "body": [
      "import axios from 'axios';",
      "",
      "const api = axios.create({",
      "  baseURL: ${1},",
      "});",
      "",
      "export default api;",
      ""
    ],
    "description": "Create Axios Configuration file"
  },

  "apiAuth": {
    "prefix": "api-auth",
    "body": [
      "import axios from 'axios';",
      "import { getToken } from './auth';",
      "",
      "const api = axios.create({",
      "  baseURL: ${1},",
      "});",
      "",
      "api.interceptors.request.use((config) => {",
      "  const token = getToken();",
      "  const headers = { ...config.headers };",
      "",
      "  if (token) {",
      "    headers.Authorization = `Bearer ${token}`;",
      "  }",
      "",
      "  return { ...config, headers };{",
      "});",
      "",
      "export default api;",
      ""
    ],
    "description": "Create the Axios configuration file with the JWT Authentication"
  },

  "mapStateToProps": {
    "prefix": "mapstatetoprops",
    "body": ["const mapStateToProps = state => ({", "  ${1}", "});"],
    "description": "Create Redux method mapStateToProps"
  },

  "mapDispatchToProps": {
    "prefix": "mapdispatchtoprops",
    "body": [
      "const mapDispatchToProps = dispatch =>",
      "  bindActionCreators(${1}, dispatch);"
    ],
    "description": "Create Redux method mapDispatchToProps"
  },

  "storeIndex": {
    "prefix": "createStore-index",
    "body": [
      "import { persistStore } from 'redux-persist';",
      "import createSagaMiddleware from 'redux-saga';",
      "",
      "import createStore from './createStore';",
      "import persistReducers from './persistReducers';",
      "",
      "import rootReducer from './modules/rootReducer';",
      "import rootSaga from './modules/rootSaga';",
      "",
      "const sagaMonitor =",
      "process.env.NODE_ENV === 'development'",
      "? console.tron.createSagaMonitor()",
      ": null;",
      "",
      "const sagaMiddleware = createSagaMiddleware({ sagaMonitor });",
      "",
      "const middlewares = [sagaMiddleware];",
      "",
      "const store = createStore(persistReducers(rootReducer), middlewares);",
      "const persistor = persistStore(store);",
      "",
      "sagaMiddleware.run(rootSaga);",
      "",
      "export { store, persistor };"
    ],
    "description": "Create Store Index"
  },

  "createStore": {
    "prefix": "createStore",
    "body": [
      "import { createStore, compose, applyMiddleware } from 'redux';",
      "",
      "export default (reducers, middlewares) => {",
      "const enhancer =",
      "process.env.NODE_ENV === 'development'",
      "? compose(",
      "console.tron.createEnhancer(),",
      "applyMiddleware(...middlewares)",
      ")",
      ": applyMiddleware(...middlewares);",
      "",
      "return createStore(reducers, enhancer);",
      "};"
    ],
    "description": "Create a createStore.js"
  },

  "persistReducers": {
    "prefix": "createPersistReducers",
    "body": [
      "import storage from 'redux-persist/lib/storage';",
      "import { persistReducer } from 'redux-persist';",
      "",
      "export default reducers => {",
      "const persistedReducer = persistReducer(",
      "{",
      "key: '${TM_DIRECTORY/(.*${WORKSPACE_NAME}\\\\)(.*)/${2:/capitalize}/}',",
      "storage,",
      "whitelist: [''],",
      "},",
      "reducers",
      ");",
      "",
      "return persistedReducer;",
      "};"
    ],
    "description": "Create Persist Reducers file"
  },

  "createModulesRootReducer": {
    "prefix": "createModulesRootReducer",
    "body": [
      "import { combineReducers } from 'redux';",
      "",
      "import error from './error/reducer';",
      "import loading from './loading/reducer';",
      "import notifications from './notifications/reducer';",
      "import sidebar from './sidebar/reducer';",
      "",
      "export default combineReducers({",
      "});"
    ],
    "description": "Create rootReducer in 'modules' folder"
  },

  "createModulesRootSaga": {
    "prefix": "createModulesRootSaga",
    "body": [
      "import { all } from 'redux-saga/effects';",
      "",
      "export default function* rootSaga() {",
      "return yield all([]);",
      "}"
    ],
    "description": "Create rootSaga in 'modules' folder"
  },

  "createAction": {
    "prefix": "createAction",
    "body": [
      " export function Request() {",
      "return {",
      "type: '@${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}/REQUEST',",
      "};",
      "}",
      "",
      "export function Success(data) {",
      "return {",
      "type: '@${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}/SUCCESS',",
      "payload: { data },",
      "};",
      "}",
      "",
      "export function Failure(data) {",
      "return {",
      "type: '@${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}/FAILURE',",
      "payload: { data },",
      "};",
      "}"
    ],
    "description": "Create Action File"
  },

  "createReducer": {
    "prefix": "createReducer",
    "body": [
      "import produce from 'immer';",
      "",
      "const INITIAL_STATE = {",
      "  loading: true,",
      "}",
      "export default function  ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}(state = INITIAL_STATE, action) {",
      "return produce(state, draft => {",
      "switch (action.type) {",
      "case '@${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}/REQUEST': {",
      "draft.loading = true;",
      "break;",
      "}",
      "case '@${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}/SUCCESS': {",
      "draft.loading = false;",
      "break;",
      "}",
      "case '@${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}/FAILURE': {",
      "draft.loading = false;",
      "break;",
      "}",
      " default:",
      "}",
      "});",
      "}"
    ],
    "description": "Create Reducer File"
  },

  "rootSaga": {
    "prefix": "saga",
    "body": [
      "import { all, takeLatest, call, put } from 'redux-saga/effects';",
      "",
      "import api from '~/services/api';",
      "import {  } from './action';",
      "",
      "export function* method() {",
      "}",
      "",
      "export default all([",
      "takeLatest('@${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}/REQUEST', method),",
      "]);"
    ],
    "description": "Create Sagas File"
  },

  "createReactotronConfig": {
    "prefix": "createReactotronConfig",
    "body": [
      "import Reactotron from 'reactotron-react-js';",
      "",
      "if (process.env.NODE_ENV === 'development') {",
      "  const tron = Reactotron",
      "    .connect();",
      "",
      "  console.tron = tron;",
      "",
      "  tron.clear();",
      "",
      "}",
      ""
    ],
    "description": "Create ReactJS Reactotron Config"
  },

  "createReactotronConfigRedux": {
    "prefix": "createReactotronConfigRedux",
    "body": [
      "import Reactotron from 'reactotron-react-js';",
      "import { reactotronRedux } from 'reactotron-redux';",
      "import sagaPlugin from 'reactotron-redux-saga';",
      "",
      "if (__DEV__) {",
      "  const tron = Reactotron.configure()",
      "    .use(reactotronRedux())",
      "    .use(sagaPlugin())",
      "    .connect();",
      "",
      "  console.tron = tron;",
      "",
      "  tron.clear();",
      "",
      "}",
      ""
    ],
    "description": "Create ReactJS Reactotron Config with Redux and Redux Saga"
  }
}
